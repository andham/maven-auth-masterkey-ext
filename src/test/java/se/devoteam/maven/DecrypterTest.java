package se.devoteam.maven;

/*
 * se.devoteam.mave.DecrypterTest
 * 
 * Version:  1.0 
 *
 * Date:     2012-09-18
 * 
 * Copyright: 
 */

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.maven.settings.Proxy;
import org.apache.maven.settings.Server;
import org.apache.maven.settings.crypto.SettingsDecrypter;
import org.apache.maven.settings.crypto.SettingsDecryptionRequest;
import org.apache.maven.settings.crypto.SettingsDecryptionResult;
import org.junit.Test;
import org.sonatype.plexus.components.sec.dispatcher.SecDispatcherException;

import junit.framework.Assert;

/**
 * Test the {@link se.devoteam.maven.Decrypter}
 * 
 * @author Karin Karlsson
 *
 */
public class DecrypterTest {
	
	/**
	 * Test {@link se.devoteam.maven.Decrypter#decrypt(SettingsDecryptionRequest)}.
	 * <p/>It sends in an empty request to the decrypt method and should get an empty result back.
	 */
	@Test
	public void testDecryptEmptyRequest() {
		SettingsDecrypter decrypter = new Decrypter();
		SettingsDecryptionResult result = decrypter.decrypt(getEmptyRequest());
		Assert.assertNotNull(result);
		Assert.assertTrue(result.getServers().isEmpty());
		Assert.assertTrue(result.getProxies().isEmpty());
		Assert.assertTrue(result.getProblems().isEmpty());	
	}
	
	//TODO: fix this
	
//	/**
//	 * Test {@link se.devoteam.maven.Decrypter#decrypt(SettingsDecryptionRequest)}.
//	 * <p/>It tests that the method throws a <code>SecDispatcherException</code> since the 
//	 * {@link #Decrypter.SYSTEM_PROPERTY_SEC_LOCATION) isn't set.
//	 */
//	@Test(expected=SecDispatcherException.class)
//	public void testDecryptPassword() {
//		SettingsDecrypter decrypter = new Decrypter();
//		SettingsDecryptionRequest req = getOneServerPasswordEncrypted();
//		decrypter.decrypt(req);
//	}
	
	/**
	 * Test {@link se.devoteam.maven.Decrypter#decrypt(SettingsDecryptionRequest)}.
	 * <p/>The test creates a temporary file formatted as the <code>settings-security.xml</code>.
	 * The file includes the <code>master</code> element only.
	 * The test is successful if it can decrypt the password of the following server instance:
	 * 
	 * <pre>
	 * Server.id = local-nexus
	 * Server.username = admin
	 * Server.password = {MgY2WK6he9oH/tILhPP1JhGDlsmYWTGGvVOpLc1qKso=}
	 * </pre>
	 * 
	 * <p/>Note the temporary file is stored in the <code>java.io.tmpdir</code>.
	 * The file name pattern is m<i>System.currentTimeMillis()</i>.tmp.
	 * The file should be removed when the jvm exits. 
	 * 
	 * @see #createContent()
	 * @see #createTmpFile(String, String)
	 * @see #getOneServerPasswordEncrypted()
	 */
	@Test
	public void testDecryptPasswordTmpFile() {
		
		SettingsDecrypter decrypter = new Decrypter();
		String tmpFileName = null;
		
		try {
			tmpFileName = createTmpFile("m" + System.currentTimeMillis(),".tmp");
			System.setProperty(Decrypter.SYSTEM_PROPERTY_SEC_LOCATION, tmpFileName);
			SettingsDecryptionResult result = decrypter.decrypt(getOneServerPasswordEncrypted());
			Assert.assertFalse(result.getServer().getPassword().startsWith("{"));
			Assert.assertFalse(result.getServer().getPassword().endsWith("{"));
			Assert.assertTrue(result.getServer().getPassword().equals("admin123"));
		} catch (IOException e) {
			Assert.fail(e.getMessage());
		} finally {
			if (tmpFileName != null) {
				File f = new File(tmpFileName);
				if (f.exists()) {
					f.delete();
				}
			}
		}	
	}
	
	/**
	 * Test {@link se.devoteam.maven.Decrypter#decrypt(SettingsDecryptionRequest)}.
	 * <p/>This test sends in a server object where the server properties are not set.
	 */
	@Test
	public void testPwdIsNull() {
		SettingsDecrypter decrypter = new Decrypter();
		SettingsDecryptionResult result = decrypter.decrypt(getServerPasswordNotSetRequest());
		Assert.assertNull(result.getServer().getPassword());
		
	}
	
	/**
	 * Creates a temporary file stored in the <code>java.io.tmpdir</code> directory.
	 * The content of the file is generated by the {@link #createContent()} method.
	 * 
	 * @param prefix the filename
	 * @param suffix the file extension
	 * @return the canonical path to the temporary file
	 * @throws IOException i/o error
	 * @see #createContent()
	 * 
	 */
	private static String createTmpFile(final String prefix, final String suffix) throws IOException {
		File f = File.createTempFile(prefix, suffix);
		FileOutputStream fout = new FileOutputStream(f);
		fout.write(createContent());
		fout.flush();
		fout.close();
		return f.getCanonicalPath();
		
	}
	
	/**
	 * @return a <code>settings-security.xml</code> formatted string that includes the master tag.
	 * This password works with the password returned by the {@link #getOneServerPasswordEncrypted()}.
	 */
	private static byte [] createContent() {
		final String content = new String("<settingsSecurity><master>{GiTE7JtdcWUHNZYC+p5P3AZVLDzI7ygb0EOFiFZZ7P0=}</master></settingsSecurity>");
		return content.getBytes();
	}
	
	/**
	 * Creates a new <code>SettingsDecryptionRequest</code> instance that has one server instance. The 
	 * server instance is set as follows:
	 * <pre>
	 * Server.id = local-nexus
	 * Server.username = admin
	 * Server.password = {MgY2WK6he9oH/tILhPP1JhGDlsmYWTGGvVOpLc1qKso=}
	 * 
	 * The server password has been ecrypted with the master key: {GiTE7JtdcWUHNZYC+p5P3AZVLDzI7ygb0EOFiFZZ7P0=}
	 * The password in plain text is admin123.
	 * 
	 * </pre>
	 * @return a new <code>SettingsDecryptionRequest</code> instance that has one server and no proxies
	 * Note that the methods <code>setProxies(List)</code> and <code>setServers(List)</code>
	 * throws <code>UnsupportedOperationException</code>.
	 * @see #createContent()
	 */
	private static SettingsDecryptionRequest getOneServerPasswordEncrypted() {
		return new SettingsDecryptionRequest() {
			
			@SuppressWarnings("unchecked")
			public List<Proxy> getProxies() {
				return Collections.EMPTY_LIST;
			}

			public List<Server> getServers() {
				return getOneServerEncryptedPwd();
			}

			/**
			 * Not supported. The proxy list is empty.
			 */
			public SettingsDecryptionRequest setProxies(List<Proxy> arg0) {
				throw new UnsupportedOperationException();
			}

			/**
			 * Not supported. 
			 */
			public SettingsDecryptionRequest setServers(List<Server> arg0) {
				throw new UnsupportedOperationException();
			}
			

			private List<Server> getOneServerEncryptedPwd() {
				final List<Server> servers = new ArrayList<Server>(1);
				Server s = new Server();
				s.setId("local-nexus");
				s.setUsername("admin");
				//this is the encrypted version of admin123
				//the master key: see createContent() method
				s.setPassword("{MgY2WK6he9oH/tILhPP1JhGDlsmYWTGGvVOpLc1qKso=}");
				servers.add(s);
				return servers;
			}
			
		};
	}
	
	/**
	 * 
	 * @return a new <code>SettingsDecryptionRequest</code> instance that has one server and one proxy.
	 * The server password is not set.
	 * Note that the methods <code>setProxies(List)</code> and <code>setServers(List)</code>
	 * throws <code>UnsupportedOperationException</code>.
	 */
	private static SettingsDecryptionRequest getServerPasswordNotSetRequest() {
		return new SettingsDecryptionRequest() {
			
			@SuppressWarnings("unchecked")
			public List<Proxy> getProxies() {
				return Collections.EMPTY_LIST;
			}

			public List<Server> getServers() {
				return getOneServerPwdNotSet();
			}

			/**
			 * Not supported. The proxy list is empty.
			 */
			public SettingsDecryptionRequest setProxies(List<Proxy> arg0) {
				throw new UnsupportedOperationException();
			}

			/**
			 * Not supported. 
			 */
			public SettingsDecryptionRequest setServers(List<Server> arg0) {
				throw new UnsupportedOperationException();
			}
			

			private List<Server> getOneServerPwdNotSet() {
				final List<Server> servers = new ArrayList<Server>(1);
				Server s = new Server();
				servers.add(s);
				return servers;
			}
			
		};		
	}
	
	/**
	 * 
	 * @return a new <code>SettingsDecryptionRequest</code> instance that has no
	 * servers or proxies.
	 * Note that the methods <code>setProxies(List)</code> and <code>setServers(List)</code>
	 * throws <code>UnsupportedOperationException</code> since this is an empty request 
	 * (i.e. the server list and proxy lists are empty).
	 */
	private static SettingsDecryptionRequest getEmptyRequest() {
		return new SettingsDecryptionRequest() {

			@SuppressWarnings("unchecked")
			public List<Proxy> getProxies() {
				return getEmptyList();
			}

			@SuppressWarnings("unchecked")
			public List<Server> getServers() {
				return getEmptyList();
			}

			/**
			 * Not supported. The proxy list is empty.
			 */
			public SettingsDecryptionRequest setProxies(List<Proxy> arg0) {
				throw new UnsupportedOperationException();
			}

			/**
			 * Not supported. The server list is empty.
			 */
			public SettingsDecryptionRequest setServers(List<Server> arg0) {
				throw new UnsupportedOperationException();
			}
			
			@SuppressWarnings("rawtypes")
			private List getEmptyList() {
				return Collections.EMPTY_LIST;
			}
			
		};
	}

}
